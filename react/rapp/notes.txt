Conditional Rendering
1. if/else
2. element variables
3. Ternary operator
4. Short Circuit operator

Life Cycle Stages
1. Mounting - instance created and inserted into the DOM
2. Updating - re rendering of the component(change in state or props)
3. Unmonting - component is removed from DOM
4. Error Handling - errors during rendering/ erros in the ctr of child components
 
Mounting - ctr, static getDerivedStateFromProps, render, componentDidMount

Updating - static getDerivedStateFromProps, shouldComponentUpdate, render,
            getSnapshotBeforeUpdate , componentDidUpdate

Unmonting - componentWillUnmount

Error Handling - static getDerivedStateFromError, componentDidCatch

class Component

ERROR BOUNDARY:Catches the error and creats a fallback UI

SC:

primitive types:
a , b have the same val and of the same types

complex types:
a,b the same references to the same exact object

a = ""
b = ""
c = a

a===b

a===c


SC of prevState with currentState
SC of prevProps with currentProps


tesla
tesla
tesla
honda
tesla


HOC-Higher Order Components

Comp - > HOC - > Modified Comp

render props = sharing code using prop hose value is a function

Context
1. Create the Context
2. provide a context value
3. Consume the context value

Hooks:
new feature of version 16.8

they allow us to use react features without having to create class components

eg. state of a component

1. this 
2. reuse stateful component logic
   HOC, render props
   simple using Hooks
3. data ftching code (componentDidMount, componentDidUpdate) 
   event listeners(componentDidMount, componentWillUnmount)
   have the logic in a single place

   useEffect: it lets us perform side effecs in fn components

   componentDidMount(){
       document.title = ""
       this.interval = setInterval(1000)
   }
   componentDidUpdate(){
       document.title = ""
   }
   componentWillUnmount(){
       clearInterval(this.interval)
   }